Goal: Add email verification and password reset using Resend, reusing the secrets already set: RESEND_API_KEY, FROM_EMAIL, FROM_NAME, APP_URL.
Scope control: Do not modify leagues, giornate, leaderboard, Supercoppa/Coppa, or any scoring logic. Only add the email flows below.

1) Email helper

If not already present, add server/lib/email.ts exporting:

sendEmail({ to, subject, html, text }) using RESEND_API_KEY, FROM_EMAIL, FROM_NAME.

All email links must use absolute URLs based on process.env.APP_URL.

2) Database (Drizzle / Neon)

Add two tables (additive; do not change existing tables):

email_verification_tokens:
id (uuid pk), user_id (uuid), token (text unique), expires_at (timestamptz), used_at (timestamptz nullable), created_at (timestamptz default now())

password_reset_tokens:
id (uuid pk), user_id (uuid), token (text unique), expires_at (timestamptz), used_at (timestamptz nullable), created_at (timestamptz default now())

Add nullable fields to users if missing: email text unique, email_verified_at timestamptz.

3) Signup + verification

Client: On the Onboarding/Signup form, require Email (keep nickname/password unchanged). After successful signup, show “Controlla la tua email per verificare l’account”.

Server:

POST /api/auth/signup

Create user with email and email_verified_at = null.

Generate random token (32+ bytes), store in email_verification_tokens with 60 min expiry.

sendEmail() to the user with link:
${APP_URL}/auth/verify?token=<token>

GET /api/auth/verify?token=...

Validate token (exists, not expired, not used).

Set users.email_verified_at = now(), mark token used_at = now().

Respond with a simple success page/message.

Note: Do not block login for unverified users yet; just expose a flag unverified: true in /api/auth/me so the UI can remind them.

4) Forgot / reset password

Client:

On login page, add link “Hai dimenticato la password?”.

Page 1: Email input → calls POST /api/auth/forgot-password.

Page 2: Reset form (reads ?token=... from URL) → New password + confirmation → calls POST /api/auth/reset-password.

Server:

POST /api/auth/forgot-password { email }

Always return 200 (“Se esiste un account, ti abbiamo inviato un’email”).

If user exists: create reset token (60 min), store in password_reset_tokens, send link:
${APP_URL}/auth/reset?token=<token>

GET /api/auth/reset?token=...

Validate token (exists, not expired, not used).

Return 200 so client can show the reset form (or redirect to the reset page).

POST /api/auth/reset-password { token, newPassword }

Validate token; set new password hash for that user; mark token used; return 200.

5) Security & UX

Tokens: crypto-secure random; store as-is or hashed (your choice).

Expiry: 60 minutes for both flows.

Rate-limit: basic per IP/email (minimal; don’t over-engineer).

Emails: plain, simple HTML with a single clear CTA button; add a text fallback link.

6) Acceptance

Signup creates user and sends verification email. Clicking the link verifies the account.

Forgot password sends email; reset link sets a new password successfully.

/api/auth/me includes unverified: true until verification (UI can show a small reminder).

No changes to leagues, giornate, leaderboard, Supercoppa/Coppa, or scoring.

Build passes; existing users can still log in normally.